// how to print ur name "n" times with recursion


void solve(ll i ,ll n) {
    if (i > n) {
        return;
    }
    cout << "Sid" << endl;
    i++;
    solve(i, n);
}

int main() {
    ll n;
    cin >> n;
    solve(1, n);
}

// or u can also do

ll cnt = 0;
void solve() {
    if (cnt == 3) {
        return;
    }
    cout << cnt << "\n";
    cnt++;
    solve();
}

int main() {
    solve();
}


//print 1 to n using recursion

void solve(ll i , ll n) {
    if (i > n) {
        return;
    }
    cout << i << "\n";
    solve(i + 1, n);
}

int main() {
    ll n;
    cin >> n;
    solve(1, n);
}

 
//print n to 1 in reverse using recursion
void solve(ll n) {
    if (n <= 0) {
        return;
    }
    else {
        cout << n << "\n";
        n--;
        solve(n);
    }
}

int main() {
    ll n;
    cin >> n;
    solve(n);
}

///paramterised function : -

void solve(ll i, ll sum) {
    if (i < 1) {
        cout << sum;
        return;
    }
    solve(i - 1, sum + i);
}

int main() {
    ll n;
    cin >> n;
    solve(n, 0);
}

///functional function : - 
void solve(ll n) {
    if (n == 0){
        return 0;
    }
    else{
        n + solve(n - 1);
    }
}

int main() {
    ll n;
    cin >> n;
    solve(n);
}




// to check if the array is sorted and return true or false according to it

bool isSorted(ll arr[], ll n) {
    if ( n == 0 || n == 1) {
        return true;
    }
    if (arr[0] > arr[1]) {
        return false;
    }
    else {
        bool ans = isSorted(arr + 1, n - 1);
        return  ans;    
    }
}

int main() {
    ll n;
    cin >> n;
    ll arr[n];
    FOR(i, n) {
        cin >> arr[i];
    }
    bool sort = isSorted(arr,n);
    if (sort)
    {
        cout << "sorted";
    }
    else{
        cout << "nt sorted";
    }

}


///to find the sum of array using recursion


int sum(ll *arr, ll n) {
    if (n == 0) {
        return 0;
    }
    if (n == 1) {
        return arr[0];
    }
    ll remain = sum(arr + 1, n - 1);
    ll ans = arr[0] + remain;
    return ans;

}

int main() {
    ll n;
    cin >> n;
    ll arr[n];
    FOR(i, n) {
        cin >> arr[i];
    }
    ll final = sum(arr,n);
    cout << final ;


}


/// using linear search,find a alement in array


bool search(ll arr[], ll n , ll k) {
    if (n == 0) {
        return false;
    }
    if (arr[0] == k)
    {
        return true;
    }
    else {
        bool remain = search(arr + 1, n - 1, k);
        return remain;
    }

}

int main() {
    ll n;
    cin >> n;
    ll arr[n];
    FOR(i, n) {
        cin >> arr[i];
    }
    ll k;
    cin >> k;
    bool ans = search(arr, n, k);
    if (ans) {
        cout << "element found";
    }
    else {
        cout << "nt found";
    }
}


/// using binary search,find a alement in array

bool binarySearch(ll arr*, ll s , ll e, ll k) {
    if (s > e) {
        return false;
    }
    ll mid  = (s + e) >> 1;
    if (arr[mid] == k) {
        return true;
    }

    if (arr[mid] < k)
    {
        return binarySearch(arr, mid + 1, e, k);
    }
    else {
        return binarySearch(arr, s, mid - 1, k);
    }
}

int main() {
    ll n;
    cin >> n;
    ll arr[n];
    FOR(i, n) {
        cin >> arr[i];
    }
    ll k;
    cin >> k;
    if (binarySearch(arr, 0, (n - 1), k)) {
        cout << "element PRESENT";
    }
    else {
        cout << "nt PRESENT";
    }

}

// finding the power of a number

int power(ll a , ll b) {
    if (b == 0) {
        return 1;
    }
    if (b == 1) {
        return a;
    }
    ll ans = power(a, b / 2);
    if (b % 2 == 0) {
        return ans * ans;
    }
    else {
        return a * (ans * ans);
    }
}

int main() {
    ll a, b;
    cin >> a >> b;
    ll ans = power(a, b);
    cout << ans;
}
 
//find the factorial using recursion

int fact(ll m) {
    if (m < 1) {
        return -1;
    }
    else if (m == 1) {
        return 1;
    }
    return m * fact(m - 1);
}

int main() {
    ll n;
    cin >> n;
    ll ans = fact(n);
    cout << ans;
}

// bubblesort using recursion

void bubbleSort(ll arr[], ll n) {
    if (n == 0 || n == 1) {
        return;
    }
    for (int i = 0; i < n - 1; i++) {
        if (arr[i] > arr[i + 1]) {
            swap(arr[i] , arr[i + 1]);
        }
    }
    bubbleSort(arr, n - 1);
}

int main() {
    ll n;
    cin >> n;
    ll arr[n];
    FOR(i, n) {
        cin >> arr[i];
    }
    bubbleSort(arr, n);
}
